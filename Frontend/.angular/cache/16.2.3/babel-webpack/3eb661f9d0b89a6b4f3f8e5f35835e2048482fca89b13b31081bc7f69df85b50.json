{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { invariant as originalInvariant, InvariantError } from \"ts-invariant\";\nimport { version } from \"../../version.js\";\nimport global from \"./global.js\";\nimport { stringifyForDisplay } from \"../common/stringifyForDisplay.js\";\nfunction wrap(fn) {\n  return function (message) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    if (typeof message === \"number\") {\n      fn(getErrorMsg(message, args));\n    } else {\n      fn.apply(void 0, __spreadArray([message], args, false));\n    }\n  };\n}\nvar invariant = Object.assign(function invariant(condition, message) {\n  var args = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n  if (!condition) {\n    originalInvariant(condition, getErrorMsg(message, args));\n  }\n}, {\n  debug: wrap(originalInvariant.debug),\n  log: wrap(originalInvariant.log),\n  warn: wrap(originalInvariant.warn),\n  error: wrap(originalInvariant.error)\n});\nfunction newInvariantError(message) {\n  var optionalParams = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    optionalParams[_i - 1] = arguments[_i];\n  }\n  return new InvariantError(getErrorMsg(message, optionalParams));\n}\nvar ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + version);\nfunction getErrorMsg(message, messageArgs) {\n  if (messageArgs === void 0) {\n    messageArgs = [];\n  }\n  if (!message) return;\n  var args = messageArgs.map(function (arg) {\n    return typeof arg == \"string\" ? arg : stringifyForDisplay(arg, 2).slice(0, 1000);\n  });\n  return global[ApolloErrorMessageHandler] && global[ApolloErrorMessageHandler](message, args) || \"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n    version: version,\n    message: message,\n    args: args\n  })));\n}\nexport { invariant, InvariantError, newInvariantError, ApolloErrorMessageHandler };","map":{"version":3,"names":["__spreadArray","invariant","originalInvariant","InvariantError","version","global","stringifyForDisplay","wrap","fn","message","args","_i","arguments","length","getErrorMsg","apply","Object","assign","condition","debug","log","warn","error","newInvariantError","optionalParams","ApolloErrorMessageHandler","Symbol","for","messageArgs","map","arg","slice","concat","encodeURIComponent","JSON","stringify"],"sources":["C:/GraphQL Training/Frontend/graphql-frontend/node_modules/@apollo/client/utilities/globals/invariantWrappers.js"],"sourcesContent":["import { __spreadArray } from \"tslib\";\nimport { invariant as originalInvariant, InvariantError } from \"ts-invariant\";\nimport { version } from \"../../version.js\";\nimport global from \"./global.js\";\nimport { stringifyForDisplay } from \"../common/stringifyForDisplay.js\";\nfunction wrap(fn) {\n    return function (message) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (typeof message === \"number\") {\n            fn(getErrorMsg(message, args));\n        }\n        else {\n            fn.apply(void 0, __spreadArray([message], args, false));\n        }\n    };\n}\nvar invariant = Object.assign(function invariant(condition, message) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    if (!condition) {\n        originalInvariant(condition, getErrorMsg(message, args));\n    }\n}, {\n    debug: wrap(originalInvariant.debug),\n    log: wrap(originalInvariant.log),\n    warn: wrap(originalInvariant.warn),\n    error: wrap(originalInvariant.error),\n});\nfunction newInvariantError(message) {\n    var optionalParams = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        optionalParams[_i - 1] = arguments[_i];\n    }\n    return new InvariantError(getErrorMsg(message, optionalParams));\n}\nvar ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + version);\nfunction getErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) { messageArgs = []; }\n    if (!message)\n        return;\n    var args = messageArgs.map(function (arg) {\n        return typeof arg == \"string\" ? arg : stringifyForDisplay(arg, 2).slice(0, 1000);\n    });\n    return ((global[ApolloErrorMessageHandler] &&\n        global[ApolloErrorMessageHandler](message, args)) ||\n        \"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n            version: version,\n            message: message,\n            args: args,\n        }))));\n}\nexport { invariant, InvariantError, newInvariantError, ApolloErrorMessageHandler, };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}